name: CI Pipeline

on:
  push:
    branches:
      - main
      - dev
      - feature/*
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if Docker-related files have changed
        id: check_files
        run: |
          echo "Checking for changes in Docker-related files..."
          git fetch origin
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}..HEAD)
          echo "changed_files=${CHANGED_FILES}" >> $GITHUB_ENV
          if echo "${CHANGED_FILES}" | grep -E 'Dockerfile|src/|build/'; then
            echo "Docker-related files have changed."
            echo "build_required=true" >> $GITHUB_ENV
          else
            echo "No changes in Docker-related files."
            echo "build_required=false" >> $GITHUB_ENV
          fi

      - name: Build Docker image
        if: env.build_required == 'true'
        run: |
          docker build -t ghcr.io/${{ github.repository }}/my-app:latest .

      - name: Push Docker image to GHCR
        if: env.build_required == 'true'
        run: |
          docker push ghcr.io/${{ github.repository }}/my-app:latest

  run-and-store:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Pull Docker image from GHCR
        run: |
          docker pull ghcr.io/${{ github.repository }}/my-app:latest

      - name: Clean up old Docker containers
        run: |
          docker rm -f my-app-container || true

      - name: Run Docker container
        run: |
          docker run --name my-app-container \
          ghcr.io/${{ github.repository }}/my-app:latest \
          run_scrap.sh

      - name: Run Docker container and store sqlite
        id: run_container
        run: |
          docker run --name my-app-container \
          ghcr.io/${{ github.repository }}/my-app:latest \
          run_scrap.sh | tee result.log
          cat result.log
          last_line=$(tail -n 1 result.log)
          docker cp my-app-container:/app/${lastline} /app/out/gupy_from_csv.db

      - name: Stop and remove Docker container
        run: |
          docker rm -f my-app-container

      - name: Store SQLite database as artifact
        uses: actions/upload-artifact@v4
        with:
          name: gupy_from_csv
          path: /app/out/gupy_from_csv.db
